#!/bin/sh

cache_param="private/cache/param"
cache_disk="private/cache/disk"


# Fill the cache with the parameters which are used for the VM configuration.
# These parameters are either found on the param/ directory or generated with a
# default value.
# memory            = number of megabytes for VM RAM
# vcpus             = number of VM CPU
# ip                = IP address on the bridge
# ipmask            = IP mask of the bridge network
# name (optional)   = name of the VM
# pin (optional)    = the vcpus pin scheme
# serial (optional) = the name of the serial line
# vif (optional)    = the name of the bridge net iface


memory=`cat param/memory 2>/dev/null`
if [ "x${memory}" = "x" ] ; then
    echo "$0: missing parameter memory" >&2
    exit 2
fi
echo "${memory}" > "${cache_param}/memory"

vcpus=`cat param/vcpus 2>/dev/null`
if [ "x${vcpus}" = "x" ] ; then
    echo "$0: missing parameter vcpus" >&2
    exit 2
fi
echo "${vcpus}" > "${cache_param}/vcpus"

ip=`cat param/ip 2>/dev/null`
if [ "x${ip}" = "x" ] ; then
    echo "$0: missing parameter ip" >&2
    exit 2
fi
echo "${ip}" > "${cache_param}/ip"

ipmask=`cat param/ipmask 2>/dev/null`
if [ "x${ipmask}" = "x" ] ; then
    echo "$0: missing parameter ipmask" >&2
    exit 2
fi
echo "${ipmask}" > "${cache_param}/ipmask"

name=`cat param/name 2>/dev/null`
if [ "x${name}" = "x" ] ; then
    name="hvm-"`date '+%s%N'`
fi
echo "${name}" > "${cache_param}/name"

serial=`cat param/serial 2>/dev/null`
echo "${serial}" > "${cache_param}/serial"

vif=`cat param/vif 2>/dev/null`
echo "${vif}" > "${cache_param}/vif"

# The Xen configuration file is unable to understand complex pinning, so only
# write the concerned cpus in the config file, then make the actual pinning
# later
pin=`cat param/pin 2>/dev/null`
cpus=
if [ "x${pin}" != "x" ] ; then
    for spec in ${pin} ; do
	while [ "x$spec" != "x" ] ; do
	    range="${spec%%,*}"

	    start="${range%-*}"
	    end="${range#*-}"

	    if ! echo $start | grep -Eq '^[[:digit:]]+$' ; then
		echo "$0: bad parameter pin : '${pin}'" >&2
		exit 2
	    fi
	    if ! echo $end | grep -Eq '^[[:digit:]]+$' ; then
		echo "$0: bad parameter pin : '${pin}'" >&2
		exit 2
	    fi

	    if [ $start -gt $end ] ; then
		echo "$0: bad parameter pin : '${pin}'" >&2
	    fi

	    for core in `seq $start $end` ; do
		echo $core
	    done

	    nspec="${spec#*,}"
	    if [ "$nspec" = "$spec" ] ; then
		spec=
	    else
		spec="$nspec"
	    fi
	done
    done > "${cache_param}/cpus"

    accu=`sort -gu "${cache_param}/cpus"`
    while [ `echo $accu | wc -w` -lt $vcpus ] ; do
	accu="$accu $accu"
    done

    pcpus=0
    cpus=
    
    for cpu in $accu ; do
    	if [ "x${cpus}" != "x" ] ; then
	    cpus="${cpus} , "
	fi
	cpus="${cpus}\"${cpu}\""

	pcpus=$(( $pcpus + 1 ))
	if [ $pcpus -ge $vcpus ] ; then
	    break
	fi
    done
fi
echo "${cpus}" > "${cache_param}/cpus"
echo "${pin}" > "${cache_param}/pin"

# Fill the cache with the matching (partition file, partition type, partition
# name).
# The partition files and types are found on the param/disk/ directory and are
# named <name>.<fs> where <fs> is the partition type and name indicate where
# the partition will be mounted under /home.
# For instance :
# foo.ext4  =>  will be mounted at /home/foo as an ext4 partition
# bar.ext3  =>  will be mounted at /home/bar as an ext3 partition

suffixes=({a..z} {a..z}{a..z} {a..z}{a..z}{a..z})
counter=1
for f in param/disk/* ; do
    if [ ! -e "${f}" ] ; then
	break
    fi
    ptype="${f##*.}"
    pmnt="${f##*/}"
    pmnt="${pmnt%.*}"
    suffix="${suffixes[${counter}]}"
    echo "${PWD}/${f}" > "${cache_disk}/xvd${suffix}"
    echo "${pmnt}" >> "${cache_disk}/xvd${suffix}"
    echo "${ptype}" >> "${cache_disk}/xvd${suffix}"
    counter=$(( ${counter} + 1 ))
done
