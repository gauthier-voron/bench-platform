#!/bin/sh

if xl info >/dev/null 2>/dev/null ; then
    cores=0-47
    swap="qw(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143)"
else
    cores=0-47
    prehook="modprobe msr"
    posthook="rmmod msr"
    swap="qw(0 4 8 12 16 20 24 28 32 36 40 44 3 7 11 15 19 23 27 31 35 39 43 47 2 6 10 14 18 22 26 30 34 38 42 46 1 5 9 13 17 21 25 29 33 37 41 45 48 52 56 60 64 68 72 76 80 84 88 92 51 55 59 63 67 71 75 79 83 87 91 95 50 54 58 62 66 70 74 78 82 86 90 94 49 53 57 61 65 69 73 77 81 85 89 93 96 100 104 108 112 116 120 124 128 132 136 140 99 103 107 111 115 119 123 127 131 135 139 143 98 102 106 110 114 118 122 126 130 134 138 142 97 101 105 109 113 117 121 125 129 133 137 141)"
fi

case "$1" in
    pre)
        $prehook
	;;
    run)
	exec 1> "$LOGDIR/raw.dat"
	exec rwmsr --core=$cores \
	      0xc0010000=0x0004300d1@0-1000  \
	      0xc0010001=0x000430023@0-1000  \
	      0xc0010002=0x000430076@0-1000  \
	      \
	      :0xc0010004=0@0-1000 \
	      :0xc0010005=0@0-1000 \
	      :0xc0010006=0@0-1000
	;;
    post)
        $posthook
	perl -wlan                                       \
	     -e 'BEGIN {                               ' \
	     -e '  printf "time";                      ' \
	     -e '  foreach $core (0..47) {             ' \
	     -e '    printf " 0004300d1-%s", $core;    ' \
	     -e '  }                                   ' \
	     -e '  foreach $core (0..47) {             ' \
	     -e '    printf " 000430023-%s", $core;    ' \
	     -e '  }                                   ' \
	     -e '  foreach $core (0..47) {             ' \
	     -e '    printf " 000430076-%s", $core;    ' \
	     -e '  }                                   ' \
	     -e '  printf "\n";                        ' \
	     -e '}                                     ' \
	     -e '($. <= 2) and next;                   ' \
	     -e 'printf "%s ", shift(@F);              ' \
	     -e '@F = map { $F[$_] }                   ' \
	     -e "     $swap;                           " \
	     -e 'print join(" ", @F);                  ' \
	     "$LOGDIR/raw.dat"                           \
	     > "$LOGDIR/stall.dat"
	rm "$LOGDIR/raw.dat"
	;;
    *)
	exit 1
	;;
esac
